/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.IJVMplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.IJVMplugin.psi.IJVMTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>IJVM.flex</tt>
 */
class IJVMLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IADD = 2;
  public static final int IAND = 4;
  public static final int ISUB = 6;
  public static final int SWAP = 8;
  public static final int WIDE = 10;
  public static final int BIPUSH = 12;
  public static final int LDC_W = 14;
  public static final int ARGS = 16;
  public static final int LOCALS_ONE = 18;
  public static final int LOCALS_TWO = 20;
  public static final int WAITING_VALUE = 22;
  public static final int VALUE = 24;
  public static final int INTEGER_VALUE = 26;
  public static final int SEPARATOR = 28;
  public static final int LETTER_VALUE = 30;
  public static final int LETTER_ONLY_VALUE = 32;
  public static final int IRETURN_ONE = 34;
  public static final int IRETURN_TWO = 36;
  public static final int DEFINE_ONE = 38;
  public static final int DEFINE_TWO = 40;
  public static final int IF_OP = 42;
  public static final int NEW_LINE = 44;
  public static final int GO_TO = 46;
  public static final int ISTORE = 48;
  public static final int ILOAD = 50;
  public static final int INVOKEVIRTUAL_ONE = 52;
  public static final int INVOKEVIRTUAL_TWO = 54;
  public static final int INVOKEVIRTUAL_THREE = 56;
  public static final int INVOKEVIRTUAL_FOUR = 58;
  public static final int METHOD_ONE = 60;
  public static final int METHOD_TWO = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  1,  1, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20,  1,  1, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\40\14\0\1\36\1\26\1\6\12\37\1\43\2\0\1\7"+
    "\3\0\1\32\1\41\1\21\1\10\1\17\1\22\1\34\1\27\1\13\1\36\1\31\1\33\1\24\1\16"+
    "\1\14\1\12\1\25\1\15\1\35\1\20\1\11\1\30\1\42\3\36\4\0\1\23\1\0\32\36\12\0"+
    "\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\36\0\1\1\1\2\13\1\1\3\5\1\2\4\1\5"+
    "\3\2\13\1\1\6\1\1\1\7\2\0\1\10\4\0"+
    "\1\11\3\0\1\12\1\13\1\14\1\15\1\0\1\16"+
    "\4\0\1\17\3\0\1\20\1\10\2\0\1\21\5\0"+
    "\1\3\1\0\1\22\1\23\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\0\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u0438\0\u060c\0\u0630\0\u0654\0\u0678"+
    "\0\u069c\0\u045c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774"+
    "\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894"+
    "\0\u08b8\0\u08dc\0\u0438\0\u0900\0\u0924\0\u04c8\0\u0948\0\u0438"+
    "\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0a8c\0\u04c8\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0438\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0"+
    "\0\u0bf4\0\u0c18\0\u0438\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc"+
    "\0\u04c8\0\u0cf0\0\u04c8\0\u04c8\0\u0d14\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u0d38\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0d5c\0\u0d80"+
    "\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\37\5\40\1\41\1\37\1\42\1\43\1\44\1\45"+
    "\2\43\1\44\7\43\1\46\4\43\1\47\1\50\1\51"+
    "\1\43\1\37\1\40\1\52\1\53\2\37\5\40\32\37"+
    "\1\40\4\37\5\40\2\37\1\54\27\37\1\40\4\37"+
    "\5\40\32\37\1\40\1\54\3\37\5\40\4\37\1\54"+
    "\25\37\1\40\4\37\5\40\11\37\1\54\20\37\1\40"+
    "\4\37\5\40\3\37\1\55\26\37\1\40\4\37\5\40"+
    "\15\37\1\56\14\37\1\40\4\37\5\40\7\37\1\57"+
    "\22\37\1\40\4\37\5\40\6\37\1\60\23\37\1\40"+
    "\4\37\5\40\25\37\1\61\4\37\1\40\4\37\1\40"+
    "\1\62\1\40\1\63\1\62\1\41\31\37\1\63\4\37"+
    "\5\40\31\37\1\64\1\40\4\37\5\40\32\37\1\65"+
    "\4\37\5\40\32\37\1\66\4\37\5\40\32\37\1\67"+
    "\4\37\5\40\12\37\1\70\17\37\1\40\4\37\5\40"+
    "\10\37\1\54\21\37\1\40\4\37\5\40\11\37\1\71"+
    "\20\37\1\40\4\37\5\40\10\37\1\72\21\37\1\40"+
    "\4\37\5\40\11\37\1\73\13\37\1\74\4\37\1\40"+
    "\4\37\5\40\12\37\1\75\17\37\1\40\4\37\5\40"+
    "\6\37\1\76\23\37\1\40\4\37\5\40\24\37\1\77"+
    "\5\37\1\40\4\37\5\40\6\37\1\100\23\37\1\40"+
    "\4\37\5\40\22\37\1\101\7\37\1\40\4\37\5\40"+
    "\12\37\1\102\17\37\1\40\4\37\5\40\25\37\1\103"+
    "\4\37\1\40\4\37\5\40\11\37\1\104\20\37\1\40"+
    "\4\37\5\40\6\37\1\77\23\37\1\40\3\37\45\0"+
    "\5\40\32\0\1\40\11\0\1\105\45\0\1\106\1\107"+
    "\14\106\1\0\10\106\2\0\2\106\1\110\10\0\16\106"+
    "\1\0\10\106\2\0\2\106\1\110\10\0\4\106\1\107"+
    "\11\106\1\0\10\106\2\0\2\106\1\110\10\0\3\106"+
    "\1\111\1\112\1\113\1\114\3\106\1\115\3\106\1\0"+
    "\3\106\1\116\1\117\1\106\1\120\1\106\2\0\2\106"+
    "\1\110\10\0\1\121\13\0\1\122\5\0\1\123\1\124"+
    "\20\0\1\125\15\106\1\0\10\106\2\0\2\106\1\110"+
    "\10\0\4\106\1\126\11\106\1\0\10\106\2\0\2\106"+
    "\1\110\10\0\16\106\1\0\10\106\2\0\1\106\1\127"+
    "\1\110\10\0\3\106\1\130\12\106\1\0\10\106\2\0"+
    "\2\106\1\110\10\0\3\106\1\131\12\106\1\0\10\106"+
    "\2\0\2\106\1\110\35\0\1\132\50\0\1\133\35\0"+
    "\1\134\30\0\1\135\57\0\1\133\7\0\1\40\1\63"+
    "\1\40\2\63\32\0\1\63\42\0\1\64\5\0\5\40"+
    "\1\0\1\136\30\0\1\40\4\0\5\40\2\0\16\137"+
    "\1\0\10\137\1\0\1\40\2\137\2\0\5\40\2\0"+
    "\16\140\1\0\10\140\1\0\1\40\2\140\12\0\1\141"+
    "\54\0\1\142\40\0\1\143\51\0\1\103\36\0\1\103"+
    "\37\0\1\103\44\0\1\144\36\0\1\103\64\0\1\145"+
    "\25\0\1\146\41\0\1\147\52\0\1\150\23\0\2\105"+
    "\2\0\40\105\10\0\2\106\1\151\13\106\1\0\10\106"+
    "\2\0\2\106\1\110\10\0\6\106\1\152\7\106\1\0"+
    "\10\106\2\0\2\106\1\110\10\0\5\106\1\151\10\106"+
    "\1\0\10\106\2\0\2\106\1\110\10\0\7\106\1\153"+
    "\6\106\1\0\10\106\2\0\2\106\1\110\10\0\16\106"+
    "\1\0\1\106\1\154\6\106\2\0\2\106\1\110\10\0"+
    "\13\106\1\155\2\106\1\0\10\106\2\0\2\106\1\110"+
    "\10\0\1\156\5\106\1\156\7\106\1\0\10\106\2\0"+
    "\2\106\1\110\10\0\4\106\1\157\11\106\1\0\10\106"+
    "\2\0\2\106\1\110\10\0\1\106\1\160\6\106\1\161"+
    "\5\106\1\0\10\106\2\0\2\106\1\110\10\0\11\106"+
    "\1\162\4\106\1\0\10\106\2\0\2\106\1\110\10\0"+
    "\16\106\1\0\3\106\1\163\4\106\2\0\2\106\1\110"+
    "\10\0\2\106\1\164\13\106\1\0\10\106\2\0\2\106"+
    "\1\110\10\0\1\165\15\106\1\0\10\106\2\0\2\106"+
    "\1\110\27\0\1\166\51\0\1\166\40\0\1\167\51\0"+
    "\1\170\13\0\16\137\1\0\10\137\2\0\2\137\11\0"+
    "\16\140\1\0\10\140\2\0\2\140\16\0\1\171\41\0"+
    "\1\172\47\0\1\103\43\0\1\173\41\0\1\174\60\0"+
    "\1\175\40\0\1\176\24\0\11\106\1\177\4\106\1\0"+
    "\10\106\2\0\2\106\1\110\10\0\3\106\1\200\12\106"+
    "\1\0\10\106\2\0\2\106\1\110\40\0\1\133\13\0"+
    "\16\106\1\0\10\106\1\0\1\133\2\106\1\110\10\0"+
    "\11\106\1\201\4\106\1\0\10\106\2\0\2\106\1\110"+
    "\10\0\14\106\1\202\1\106\1\0\10\106\2\0\2\106"+
    "\1\110\10\0\2\106\1\203\13\106\1\0\10\106\2\0"+
    "\2\106\1\110\10\0\7\106\1\204\6\106\1\0\10\106"+
    "\2\0\2\106\1\110\10\0\15\106\1\205\1\0\10\106"+
    "\2\0\2\106\1\110\10\0\16\106\1\0\10\106\1\0"+
    "\1\103\2\106\1\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\36\0\1\11\14\1\1\11\26\1\1\11\2\1\2\0"+
    "\1\11\4\0\1\1\3\0\4\11\1\0\1\1\4\0"+
    "\1\11\3\0\2\1\2\0\1\11\5\0\1\1\1\0"+
    "\2\1\1\0\10\1\1\0\10\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IJVMLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 36: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 3: 
            { yybegin(YYINITIAL); return IJVMTypes.KEY;
            } 
            // fall through
          case 38: break;
          case 4: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 5: 
            { yybegin(YYINITIAL); return IJVMTypes.VALUE;
            } 
            // fall through
          case 40: break;
          case 6: 
            { yybegin(LETTER_ONLY_VALUE); return IJVMTypes.KEY;
            } 
            // fall through
          case 41: break;
          case 7: 
            { yybegin(YYINITIAL); return IJVMTypes.COMMENT;
            } 
            // fall through
          case 42: break;
          case 8: 
            { yybegin(YYINITIAL); return IJVMTypes.LETTER;
            } 
            // fall through
          case 43: break;
          case 9: 
            { yybegin(IF_OP);
            } 
            // fall through
          case 44: break;
          case 10: 
            { yybegin(DEFINE_ONE);
            } 
            // fall through
          case 45: break;
          case 11: 
            { yybegin(METHOD_ONE);
            } 
            // fall through
          case 46: break;
          case 12: 
            { yybegin(ARGS);
            } 
            // fall through
          case 47: break;
          case 13: 
            { yybegin(LOCALS_ONE);
            } 
            // fall through
          case 48: break;
          case 14: 
            { yybegin(GO_TO);
            } 
            // fall through
          case 49: break;
          case 15: 
            { yybegin(INTEGER_VALUE); return IJVMTypes.KEY;
            } 
            // fall through
          case 50: break;
          case 16: 
            { yybegin(SEPARATOR); return IJVMTypes.LETTER;
            } 
            // fall through
          case 51: break;
          case 17: 
            { yybegin(LETTER_VALUE); return IJVMTypes.KEY;
            } 
            // fall through
          case 52: break;
          case 18: 
            { yybegin(IRETURN_ONE);
            } 
            // fall through
          case 53: break;
          case 19: 
            { yybegin(INVOKEVIRTUAL_ONE);
            } 
            // fall through
          case 54: break;
          case 20: 
            { yybegin(IAND);
            } 
            // fall through
          case 55: break;
          case 21: 
            { yybegin(ILOAD);
            } 
            // fall through
          case 56: break;
          case 22: 
            { yybegin(ISUB);
            } 
            // fall through
          case 57: break;
          case 23: 
            { yybegin(ISTORE);
            } 
            // fall through
          case 58: break;
          case 24: 
            { yybegin(LDC_W);
            } 
            // fall through
          case 59: break;
          case 25: 
            { yybegin(SWAP);
            } 
            // fall through
          case 60: break;
          case 26: 
            { yybegin(BIPUSH);
            } 
            // fall through
          case 61: break;
          case 27: 
            { yybegin(WIDE);
            } 
            // fall through
          case 62: break;
          case 28: 
            { yybegin(LOCALS_TWO);
            } 
            // fall through
          case 63: break;
          case 29: 
            { yybegin(INTEGER_VALUE); return IJVMTypes.SEPARATOR;
            } 
            // fall through
          case 64: break;
          case 30: 
            { yybegin(IRETURN_TWO);
            } 
            // fall through
          case 65: break;
          case 31: 
            { yybegin(DEFINE_TWO);
            } 
            // fall through
          case 66: break;
          case 32: 
            { yybegin(INVOKEVIRTUAL_TWO);
            } 
            // fall through
          case 67: break;
          case 33: 
            { yybegin(INVOKEVIRTUAL_THREE);
            } 
            // fall through
          case 68: break;
          case 34: 
            { yybegin(INVOKEVIRTUAL_FOUR);
            } 
            // fall through
          case 69: break;
          case 35: 
            { yybegin(METHOD_TWO);
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
